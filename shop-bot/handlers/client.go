package handlers

import (
	"fmt"
	"log"
	"shop-bot/db"
	"shop-bot/models"
	"strconv"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func HandleClientBot(bot *tgbotapi.BotAPI) {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		if update.Message != nil {
			userID := update.Message.From.ID
			nameTag := update.Message.From.UserName

			// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
			if err := db.AddUser(models.User{ID: userID, NameTag: nameTag}); err != nil {
				log.Println("Failed to add user:", err)
			}

			switch update.Message.Text {
			case "/start":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:")
				msg.ReplyMarkup = clientMenu()
				bot.Send(msg)

			case "–¢–æ–≤–∞—Ä—ã":
				goods, err := db.GetGoods()
				if err != nil {
					log.Println("Failed to get goods:", err)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.")
					bot.Send(msg)
					continue
				}
				if len(goods) == 0 {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
					bot.Send(msg)
					continue
				}

				// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
				var buttons [][]tgbotapi.InlineKeyboardButton
				for _, good := range goods {
					// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
					buttonText := fmt.Sprintf("%s (%.2f ‚ÇΩ)", good.Name, good.Value)
					buttonData := fmt.Sprintf("good_%d", good.ID)
					buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData(buttonText, buttonData),
					))
				}
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
				bot.Send(msg)

			case "–ü—Ä–æ—Ñ–∏–ª—å":
				// –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				balance, err := db.GetUserBalance(userID)
				if err != nil {
					log.Println("Failed to get user balance:", err)
					balance = 0.0
				}

				// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
				history, err := db.GetPurchaseHistory(userID)
				if err != nil {
					log.Println("Failed to get purchase history:", err)
					history = []int{}
				}

				// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å
				profileText := fmt.Sprintf(
					"*–í–∞—à –±–∞–ª–∞–Ω—Å:* %.2f ‚ÇΩ üí∞\n\n"+
						"üÜî ID: %d\n"+
						"üõçÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: %d\n\n"+
						"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
					balance,
					userID,
					len(history),
				)

				// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, profileText)
				msg.ParseMode = "Markdown"

				// –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫–∏
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "top_up_balance"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("ü§ëü§ë –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", "referral_system"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üõí –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", "purchase_history"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üìú –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω", "activate_coupon"),
					),
				)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
				bot.Send(msg)

			case "–£—Å–ª—É–≥–∏":
				services, err := db.GetServices()
				if err != nil {
					log.Println("Failed to get services:", err)
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥.")
					bot.Send(msg)
					continue
				}
				if len(services) == 0 {
					msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–£—Å–ª—É–≥ –ø–æ–∫–∞ –Ω–µ—Ç.")
					bot.Send(msg)
					continue
				}

				// –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:")
				var buttons [][]tgbotapi.InlineKeyboardButton
				for _, service := range services {
					// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π —É—Å–ª—É–≥–∏
					buttonText := fmt.Sprintf("%s (%.2f ‚ÇΩ)", service.Name, service.Value)
					buttonData := fmt.Sprintf("service_%d", service.ID)
					buttons = append(buttons, tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData(buttonText, buttonData),
					))
				}
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(buttons...)
				bot.Send(msg)

			case "–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ù–∞–ø–∏—à–∏—Ç–µ @SupportBot –¥–ª—è –ø–æ–º–æ—â–∏.")
				bot.Send(msg)
			}
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil {
			callback := update.CallbackQuery
			chatID := callback.Message.Chat.ID
			var response string

			switch callback.Data {
			case "top_up_balance":
				response = "–§—É–Ω–∫—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! üí∏"
			case "referral_system":
				response = "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å! ü§ë"
			case "purchase_history":
				// –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
				userID := callback.From.ID
				history, err := db.GetPurchaseHistory(userID)
				if err != nil {
					log.Println("Failed to get purchase history:", err)
					response = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫. üõí"
				} else if len(history) == 0 {
					response = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫: —É –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫. üõí"
				} else {
					response = "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫:\n"
					goods, _ := db.GetGoods()
					for _, goodID := range history {
						for _, good := range goods {
							if good.ID == goodID {
								response += fmt.Sprintf("ID: %d, %s - %.2f\n", good.ID, good.Name, good.Value)
							}
						}
					}
				}
			case "activate_coupon":
				response = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏! üìú"
			default:
				// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞
				if strings.HasPrefix(callback.Data, "good_") {
					goodIDStr := strings.TrimPrefix(callback.Data, "good_")
					goodID, err := strconv.Atoi(goodIDStr)
					if err != nil {
						response = "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —Ç–æ–≤–∞—Ä–∞."
					} else {
						goods, err := db.GetGoods()
						if err != nil {
							response = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ."
						} else {
							for _, good := range goods {
								if good.ID == goodID {
									response = fmt.Sprintf(
										"–¢–æ–≤–∞—Ä: %s\n–¶–µ–Ω–∞: %.2f ‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: %s",
										good.Name, good.Value, good.Descr,
									)
									break
								}
							}
							if response == "" {
								response = "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω."
							}
						}
					}
				} else if strings.HasPrefix(callback.Data, "service_") {
					// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —É—Å–ª—É–≥–∏
					serviceIDStr := strings.TrimPrefix(callback.Data, "service_")
					serviceID, err := strconv.Atoi(serviceIDStr)
					if err != nil {
						response = "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π ID —É—Å–ª—É–≥–∏."
					} else {
						services, err := db.GetServices()
						if err != nil {
							response = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–µ."
						} else {
							for _, service := range services {
								if service.ID == serviceID {
									response = fmt.Sprintf(
										"–£—Å–ª—É–≥–∞: %s\n–¶–µ–Ω–∞: %.2f ‚ÇΩ\n–û–ø–∏—Å–∞–Ω–∏–µ: %s",
										service.Name, service.Value, service.Descr,
									)
									break
								}
							}
							if response == "" {
								response = "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
							}
						}
					}
				} else {
					response = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
				}
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
			msg := tgbotapi.NewMessage(chatID, response)
			bot.Send(msg)

			// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
			callbackConfig := tgbotapi.NewCallback(callback.ID, "")
			bot.Send(callbackConfig)
		}
	}
}

func clientMenu() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–¢–æ–≤–∞—Ä—ã"),
			tgbotapi.NewKeyboardButton("–ü—Ä–æ—Ñ–∏–ª—å"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("–£—Å–ª—É–≥–∏"),
			tgbotapi.NewKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞"),
		),
	)
}
